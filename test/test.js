const { expect } = require("chai");
const { ethers } = require("hardhat");
const key = ethers.utils.arrayify("0xdeadbeef");
const hex = ethers.utils.arrayify("0x608060405234801561001057600080fd5b50610376806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063591c515f14610030575b600080fd5b61004a600480360381019061004591906100f4565b610060565b60405161005791906101ee565b60405180910390f35b606082826040516020016100759291906101ca565b604051602081830303815290604052905092915050565b600061009f61009a84610235565b610210565b9050828152602081018484840111156100b757600080fd5b6100c284828561028d565b509392505050565b600082601f8301126100db57600080fd5b81356100eb84826020860161008c565b91505092915050565b6000806040838503121561010757600080fd5b600083013567ffffffffffffffff81111561012157600080fd5b61012d858286016100ca565b925050602083013567ffffffffffffffff81111561014a57600080fd5b610156858286016100ca565b9150509250929050565b600061016b82610266565b6101758185610271565b935061018581856020860161029c565b61018e8161032f565b840191505092915050565b60006101a482610266565b6101ae8185610282565b93506101be81856020860161029c565b80840191505092915050565b60006101d68285610199565b91506101e28284610199565b91508190509392505050565b600060208201905081810360008301526102088184610160565b905092915050565b600061021a61022b565b905061022682826102cf565b919050565b6000604051905090565b600067ffffffffffffffff8211156102505761024f610300565b5b6102598261032f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b82818337600083830152505050565b60005b838110156102ba57808201518184015260208101905061029f565b838111156102c9576000848401525b50505050565b6102d88261032f565b810181811067ffffffffffffffff821117156102f7576102f6610300565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f830116905091905056fea2646970667358221220eccb638bd672cd16d02692b3fcd1aaad54e6c50b45de0a2a0fa8b9c6632b748164736f6c63430008040033");
/* above hex is the bytecode generated by compiling this contract:
contract Appender {
    function append(string memory a, string memory b) public pure returns (string memory) {
        return string(abi.encodePacked(a, b));
    }
}
*/
const hex2 = ethers.utils.arrayify("0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105e5806100616000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b27ba5fd1461003b578063d138106214610057575b600080fd5b61005560048036038101906100509190610302565b610075565b005b61005f61010b565b60405161006c91906103fc565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100cf57600080fd5b81816040516020016100e29291906103d8565b604051602081830303815290604052600090805190602001906101069291906101f7565b505050565b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461016757600080fd5b60008054610174906104dd565b80601f01602080910402602001604051908101604052809291908181526020018280546101a0906104dd565b80156101ed5780601f106101c2576101008083540402835291602001916101ed565b820191906000526020600020905b8154815290600101906020018083116101d057829003601f168201915b5050505050905090565b828054610203906104dd565b90600052602060002090601f016020900481019282610225576000855561026c565b82601f1061023e57805160ff191683800117855561026c565b8280016001018555821561026c579182015b8281111561026b578251825591602001919060010190610250565b5b509050610279919061027d565b5090565b5b8082111561029657600081600090555060010161027e565b5090565b60006102ad6102a884610443565b61041e565b9050828152602081018484840111156102c557600080fd5b6102d084828561049b565b509392505050565b600082601f8301126102e957600080fd5b81356102f984826020860161029a565b91505092915050565b6000806040838503121561031557600080fd5b600083013567ffffffffffffffff81111561032f57600080fd5b61033b858286016102d8565b925050602083013567ffffffffffffffff81111561035857600080fd5b610364858286016102d8565b9150509250929050565b600061037982610474565b610383818561047f565b93506103938185602086016104aa565b61039c8161059e565b840191505092915050565b60006103b282610474565b6103bc8185610490565b93506103cc8185602086016104aa565b80840191505092915050565b60006103e482856103a7565b91506103f082846103a7565b91508190509392505050565b60006020820190508181036000830152610416818461036e565b905092915050565b6000610428610439565b9050610434828261050f565b919050565b6000604051905090565b600067ffffffffffffffff82111561045e5761045d61056f565b5b6104678261059e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b82818337600083830152505050565b60005b838110156104c85780820151818401526020810190506104ad565b838111156104d7576000848401525b50505050565b600060028204905060018216806104f557607f821691505b6020821081141561050957610508610540565b5b50919050565b6105188261059e565b810181811067ffffffffffffffff821117156105375761053661056f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f830116905091905056fea26469706673582212206d9136a1970da793d2ddfbd96ae821e72fe8975ad946f356733ddafeb0812d3e64736f6c63430008040033");
/* above hex is the bytecode generated by compiling this contract:
contract AppendAndStore {
    string private _assembled;
    address private _creator;
    constructor() {
        _creator = msg.sender;
    }
    function assemble(string memory a, string memory b) public {
        require (msg.sender == _creator);
        _assembled = string(abi.encodePacked(a, b));
    }
    function assembled() public view returns (string memory) {
        require (msg.sender == _creator);
        return _assembled;
    }
}
*/

describe("CodeCaller", function () {
  it("Should return the new greeting once it's changed", async function () {
    const ccFactory = await hre.ethers.getContractFactory("CodeCaller");
    const codeCaller = await ccFactory.deploy("Hello, Hardhat!");
    await codeCaller.deployed();
    console.log("CodeCaller deployed to:", codeCaller.address);

    expect(await codeCaller.greet()).to.equal("Hello, Hardhat!");

    let encryptedCode = await codeCaller.encryptDecrypt(hex, key);
    // console.log("encryptedCode", encryptedCode);

    let setSubContractTx = await codeCaller.setEncryptedCode(encryptedCode);
    await setSubContractTx.wait();

    // this implicitly decrypts, deploys, and runs the encrypted code with the last two strings as args
    let setCallTx = await codeCaller.callCode(key, "append(string,string)", ["Hola, ", "baby!"]);
    await setCallTx.wait();

    expect(await codeCaller.greet()).to.equal("Hola, baby!");

    // OK, let's try the more advanced version, which stores its own data and can only be called by its creator
    encryptedCode = await codeCaller.encryptDecrypt(hex2, key);
    setSubContractTx = await codeCaller.setEncryptedCode(encryptedCode);
    await setSubContractTx.wait();

    setCallTx = await codeCaller.callCode(key, "assemble(string,string)", ["Hola, ", "baby2!"]);
    await setCallTx.wait();

    setCallTx = await codeCaller.callCode(key, "assembled()", []);
    await setCallTx.wait();

    expect(await codeCaller.greet()).to.equal("Hola, baby2!");
  });
});
